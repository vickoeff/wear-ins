// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  role                  String                 @default("USER")
  image                 String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
  Favorite Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// model size {
//   id      String   @id @default(cuid())
//   name    String

//   Product Product[]
// }

// model material {
//   id      String   @id @default(cuid())
//   name    String

//   Product Product[] @relation(name: "ProductMaterial")
// }

// model category {
//   id      String   @id @default(cuid())
//   name    String

//   Product Product[] @relation(name: "ProductCategory")
// }

model Product {
  id      String   @id @default(cuid())
  name    String
  price   String
  stock   Int
  material String
  size    String
  category   String
  darkFront  String
  darkBack   String
  lightFront String
  lightBack  String

  gallery Gallery[]
  Favorite Favorite[]
}

model Favorite {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  product Product  @relation(fields: [productId], references: [id])
  productId String
}

model Gallery {
  id        String   @id @default(cuid())
  imageUrl  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}